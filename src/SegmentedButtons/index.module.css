.segmentedButtons {
  width: 100%;
  display: inline-flex;
  border-radius: 20px;
  overflow: hidden;
  border: 1px solid var(--md-sys-color-outline);
  height: 40px;
  background-color: var(--md-sys-color-surface-container-highest);
}

.button {
  flex-grow: 1;
  border: none;
  background-color: transparent;
  color: var(--md-sys-color-on-surface);
  cursor: pointer;
  text-align: center;
  composes: typescale-label-large from global;
  line-height: 40px; /* Keep line-height for vertical centering */
  outline: none;
  display: flex;
  align-items: center;
  justify-content: center; /* Default to center for content */
  position: relative;
  transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
  min-width: 48px; /* Ensure a minimum width */
  user-select: none;
  padding: 0 12px; /* Consistent padding regardless of icon */
  gap: 8px; /* Restore gap for button layout */
}

/* Class for buttons that will have an icon (either user-provided or checkmark) */
.hasIcon {
  /* padding: 0 12px; /* Default padding is fine */
  /* gap: 8px; /* Default gap is fine */
}

/* Class for buttons that have no icon */
.noIcon {
  /* padding: 0 26px; /* icon_width (18) + gap (8) = 26. This aims to center the label. */
  /* gap: 0; /* No gap needed if there's no icon */
  /* This class is no longer needed for padding/gap adjustments due to the hidden icon spacer */
}

/* State Layers */
.button::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: currentColor;
  opacity: 0;
  transition: opacity 0.2s ease-in-out;
  pointer-events: none;
  border-radius: inherit;
}

.button[data-hovered]::before {
  opacity: var(--md-sys-state-hover-state-layer-opacity);
}

.button[data-focused]::before {
  opacity: var(--md-sys-state-focus-state-layer-opacity);
}

.button[data-pressed]::before {
  opacity: var(--md-sys-state-pressed-state-layer-opacity);
}

/* Separator Line */
.button:not(:last-child) {
  border-right: 1px solid var(--md-sys-color-outline);
}

/* Selected State */
.button[data-selected] {
  background-color: var(--md-sys-color-secondary-container);
  color: var(--md-sys-color-on-secondary-container);
}

/* Disabled State */
.button[data-disabled] {
  color: color-mix(in srgb, var(--md-sys-color-on-surface) 38%, transparent);
  cursor: not-allowed;
  background-color: transparent;
}
.button[data-disabled]:not(:last-child) {
  border-right-color: color-mix(
    in srgb,
    var(--md-sys-color-outline) 38%,
    transparent
  );
}

/* Disabled State Layer for unselected buttons */
.button[data-disabled]:not([data-selected])::before {
  background-color: var(--md-sys-color-on-surface);
  opacity: 0.12;
}

/* Selected and Disabled State */
.button[data-disabled][data-selected] {
  background-color: color-mix(
    in srgb,
    var(--md-sys-color-on-surface) 12%,
    transparent
  );
  color: color-mix(in srgb, var(--md-sys-color-on-surface) 38%, transparent);
}

.button[data-disabled][data-selected]::before {
  opacity: 0;
}

/* Icon and Label Styling */
.icon,
.button svg {
  width: 18px;
  height: 18px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  fill: currentColor;
  flex-shrink: 0;
  /* margin-right: 8px; /* Ensure no specific margin here, rely on button gap */
}

.label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: inline-block;
  flex-grow: 1; /* Allow label to take available space, part of Attempt 1 */
  text-align: center; /* Center text within its available space, part of Attempt 1 */
}
