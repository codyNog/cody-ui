.chip {
  /* M3 Chip Specs: https://m3.material.io/components/chips/specs */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: 32px; /* M3 spec */
  padding: 6px 12px; /* Vertical padding 6px for 32px height */
  border-radius: 8px; /* M3 spec */
  border: 1px solid var(--md-sys-color-outline); /* Default: Flat style border */
  background-color: transparent; /* Default: Flat style background */
  color: var(--md-sys-color-on-surface-variant); /* Default text color */
  font-family: var(--md-sys-typescale-label-large-font-family-name);
  font-weight: var(--md-sys-typescale-label-large-font-weight);
  font-size: var(--md-sys-typescale-label-large-font-size);
  line-height: var(--md-sys-typescale-label-large-line-height);
  letter-spacing: var(--md-sys-typescale-label-large-letter-spacing);
  cursor: pointer;
  transition:
    background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    box-shadow 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    border-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  user-select: none;
  vertical-align: middle; /* Align with surrounding text */
  box-sizing: border-box;
  position: relative; /* For state layer */
  overflow: hidden; /* For state layer ripple */
  text-decoration: none; /* Remove potential underline from link usage */
}

/* State Layer */
.chip::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: currentColor; /* Use text color for ripple/state */
  opacity: 0;
  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  border-radius: inherit; /* Match parent border-radius */
  pointer-events: none; /* Allow clicks to pass through */
}

/* Hover state */
.chip:hover::before {
  opacity: var(--md-sys-state-hover-state-layer-opacity);
}

/* Focus state */
.chip:focus-visible {
  outline: none; /* Remove default outline */
  /* Focus indicator might vary per variant, adjust below */
}
.chip:focus-visible::before {
  opacity: var(--md-sys-state-focus-state-layer-opacity);
}

/* Active/Pressed state */
.chip:active::before {
  opacity: var(--md-sys-state-pressed-state-layer-opacity);
}

/* --- Variants --- */

/* Assist Chip (Default Flat Style) */
.assist {
  /* Uses default .chip styles for flat */
  color: var(--md-sys-color-on-surface); /* M3 Assist Chip text color */
}
.assist:focus-visible {
  border-color: var(--md-sys-color-outline); /* Keep outline on focus */
}
.assist .icon {
  color: var(--md-sys-color-primary); /* Assist chip icon color */
}

/* Filter Chip */
.filter {
  /* Uses default .chip styles for unselected flat */
  color: var(--md-sys-color-on-surface-variant);
}
.filter:focus-visible {
  border-color: var(--md-sys-color-on-surface-variant); /* Unselected focus border */
}
/* Filter Chip - Selected State */
.filter[data-selected="true"] {
  background-color: var(--md-sys-color-secondary-container);
  color: var(--md-sys-color-on-secondary-container);
  border-color: transparent; /* No border when selected */
  padding-left: 8px; /* Adjust padding for checkmark */
}
.filter[data-selected="true"]::before {
  background-color: var(--md-sys-color-on-secondary-container); /* State layer color for selected */
}
.filter[data-selected="true"]:focus-visible {
  border-color: transparent; /* No border on focus when selected */
}
/* Filter Chip - Selected State Icon (Checkmark) */
.filter[data-selected="true"] .icon {
  color: var(--md-sys-color-on-secondary-container);
  margin-right: 6px; /* Space between checkmark and label */
  /* Assumes the checkmark icon is passed via leadingIcon prop when selected */
}
/* Hide trailing icon when selected (usually not present in selected filter chip) */
.filter[data-selected="true"] .closeIcon {
  display: none;
}
/* Hide leading icon if it's not the checkmark when selected */
.filter[data-selected="true"] .icon:not(.checkmark) {
  /* Add a .checkmark class to the checkmark icon if needed */
  /* display: none; */
  /* Or handle icon switching logic in component */
}

/* Input Chip */
.input {
  color: var(--md-sys-color-on-surface-variant);
  padding-right: 4px; /* Make space for close icon touch target */
}
.input:focus-visible {
  border-color: var(--md-sys-color-on-surface-variant);
}
.input .closeIcon {
  color: var(--md-sys-color-on-surface-variant);
  margin-left: 4px; /* Reduced margin for input chip */
  margin-right: 4px; /* Ensure enough space */
}
.input .closeIcon:hover {
  background-color: color-mix(
    in srgb,
    var(--md-sys-color-on-surface-variant) 8%,
    transparent
  );
}
.input .closeIcon:active {
  background-color: color-mix(
    in srgb,
    var(--md-sys-color-on-surface-variant) 12%,
    transparent
  );
}
/* Input chip leading icon color */
.input .icon {
  color: var(--md-sys-color-on-surface-variant);
}

/* Suggestion Chip */
.suggestion {
  /* Uses default .chip styles for flat */
  color: var(--md-sys-color-on-surface); /* M3 Suggestion Chip text color */
  border-color: var(--md-sys-color-outline);
}
.suggestion:focus-visible {
  border-color: var(--md-sys-color-outline);
}

/* --- Elevated Style (Applied additively) --- */
.elevated {
  border: none;
  background-color: var(--md-sys-color-surface-container-low); /* M3 spec */
  box-shadow: var(--md-sys-elevation-level1);
  color: var(--md-sys-color-primary); /* Elevated assist/suggestion text color */
}
.elevated:hover {
  box-shadow: var(--md-sys-elevation-level2);
  background-color: var(--md-sys-color-surface-container-low); /* Keep background on hover */
}
.elevated:focus-visible {
  box-shadow: var(--md-sys-elevation-level1); /* Focus doesn't increase elevation */
  background-color: var(--md-sys-color-surface-container-low);
}
.elevated:active {
  box-shadow: var(--md-sys-elevation-level1); /* Active doesn't increase elevation */
  background-color: var(--md-sys-color-surface-container-low);
}
/* Elevated Filter Chip */
.filter.elevated {
  color: var(--md-sys-color-on-surface-variant); /* Unselected elevated filter text */
  background-color: var(--md-sys-color-surface-container-low);
}
.filter.elevated[data-selected="true"] {
  background-color: var(--md-sys-color-secondary-container);
  color: var(--md-sys-color-on-secondary-container);
  box-shadow: var(--md-sys-elevation-level0); /* No elevation when selected */
}
.filter.elevated[data-selected="true"]:hover,
.filter.elevated[data-selected="true"]:focus-visible,
.filter.elevated[data-selected="true"]:active {
  box-shadow: var(--md-sys-elevation-level0); /* Keep no elevation */
  background-color: var(--md-sys-color-secondary-container); /* Keep background */
}
/* Elevated Input Chip */
.input.elevated {
  color: var(--md-sys-color-on-surface-variant);
  background-color: var(--md-sys-color-surface-container-low);
}
/* Elevated Suggestion Chip */
.suggestion.elevated {
  color: var(--md-sys-color-primary);
  background-color: var(--md-sys-color-surface-container-low);
}

/* --- Icons --- */
.icon {
  margin-left: -4px; /* Adjust spacing to align with M3 padding */
  margin-right: 8px;
  font-size: 18px; /* M3 spec */
  width: 18px;
  height: 18px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  color: inherit; /* Default inherit, overridden by variants */
}

/* Close/Remove Icon (Trailing) */
.closeIcon {
  margin-left: 8px;
  margin-right: -4px; /* Adjust spacing */
  font-size: 18px; /* M3 spec */
  width: 18px;
  height: 18px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border-radius: 50%;
  color: inherit; /* Default inherit, overridden by variants */
  transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  /* Specific hover/active defined under .input variant */
}

/* --- Disabled State --- */
.chip[data-disabled] {
  cursor: default;
  pointer-events: none;
  border-color: color-mix(
    in srgb,
    var(--md-sys-color-on-surface) 12%,
    transparent
  );
  background-color: transparent; /* Disabled flat background */
  color: color-mix(in srgb, var(--md-sys-color-on-surface) 38%, transparent);
  box-shadow: none; /* Remove shadow if elevated */
}
.chip[data-disabled]::before {
  opacity: 0; /* No state layer for disabled */
}
.chip[data-disabled] .icon,
.chip[data-disabled] .closeIcon {
  color: inherit; /* Disabled icon color matches text */
}
/* Disabled Elevated */
.elevated[data-disabled] {
  background-color: color-mix(
    in srgb,
    var(--md-sys-color-on-surface) 12%,
    transparent
  );
  box-shadow: var(--md-sys-elevation-level0);
}
/* Disabled Selected Filter Chip */
.filter[data-selected="true"][data-disabled] {
  background-color: color-mix(
    in srgb,
    var(--md-sys-color-on-surface) 12%,
    transparent
  );
  border-color: transparent;
}

/* Adjust padding when icons are present (applied by component logic) */
.hasIcon {
  padding-left: 8px;
}
.hasCloseIcon {
  padding-right: 8px;
}
/* Special padding for selected filter chip is handled in .filter[data-selected="true"] */

/* Remove placeholders */
/* .assist {} */
/* .filter {} */
/* .input {} */
/* .suggestion {} */
