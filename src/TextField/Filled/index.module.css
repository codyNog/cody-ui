/* Wrapper for the entire component including supporting text */
.wrapper {
  display: inline-flex; /* Or block, depending on desired layout */
  flex-direction: column;
  position: relative; /* Make it a positioning context for absolute children */
  min-width: 200px; /* Keep min-width on the wrapper */
  /* Define common text color variables here so supportingTextContainer can access them */
  --text-field-supporting-text-color: var(--md-sys-color-on-surface-variant);
  --text-field-error-text-color: var(--md-sys-color-error);
}

/* Base container styles (for the input field part) */
.container {
  display: flex; /* Use flex to layout label and inputContainer */
  flex-direction: column;
  position: relative;
  padding-top: 0; /* Label floats into this space */
  height: 56px;
  min-height: 56px;
  box-sizing: border-box;
  min-width: 200px;
  background-color: var(--md-sys-color-surface-container-highest);
  border-bottom: var(--text-field-border-width) solid
    var(--md-sys-color-on-surface-variant);
  border-radius: 4px 4px 0 0; /* Top corners rounded */
  transition: background-color 0.2s ease, border-color 0.2s ease;
  --text-field-background: var(--md-sys-color-surface-container-highest);
  --text-field-border-color: var(--md-sys-color-on-surface-variant);
  --text-field-border-color-focus: var(--md-sys-color-primary);
  --text-field-border-color-error: var(--md-sys-color-error);
  --text-field-label-color: var(--md-sys-color-on-surface-variant);
  --text-field-label-color-focus: var(--md-sys-color-primary);
  --text-field-label-color-error: var(--md-sys-color-error);
  --text-field-input-color: var(--md-sys-color-on-surface);
  --text-field-disabled-opacity: 0.38;
  --text-field-border-width: 1px;
  --text-field-border-width-focus: 2px;
}

/* New container for input and adornments */
.inputContainer {
  display: flex;
  align-items: center; /* Vertically align items */
  padding: 0 12px; /* Horizontal padding for the container */
  flex-grow: 1; /* Take remaining vertical space */
  position: relative; /* For positioning input/textarea */
  /* Adjust top/bottom padding to align text correctly with label states */
  padding-top: 8px; /* Space for floated label */
  padding-bottom: 8px; /* Bottom space */
}

/* Input element styles */
.input {
  font-family: inherit;
  font-size: 1rem;
  color: var(--text-field-input-color);
  border: none;
  background-color: transparent;
  padding: 8px 0; /* Vertical padding inside inputContainer */
  outline: none;
  width: 100%;
  box-sizing: border-box;
  line-height: 1.5;
  z-index: 1;
}

/* Styles specific to the textarea element when multiline is true */
.textarea {
  font-family: inherit; /* Ensure font consistency */
  font-size: 1rem; /* Ensure font consistency */
  color: var(--text-field-input-color); /* Ensure color consistency */
  border: none; /* Ensure border consistency */
  background-color: transparent; /* Ensure background consistency */
  outline: none; /* Ensure outline consistency */
  width: 100%; /* Ensure width consistency */
  box-sizing: border-box; /* Ensure box-sizing consistency */
  z-index: 1; /* Ensure z-index consistency */
  height: auto;
  min-height: calc(56px - 16px); /* Adjust min-height based on container padding */
  resize: none;
  padding: 8px 0; /* Vertical padding inside inputContainer */
  line-height: 1.5;
}

/* Adornment styles */
.startAdornment,
.endAdornment {
  display: flex;
  align-items: center;
  color: var(--md-sys-color-on-surface-variant); /* Default color */
  /* Adjust padding/margin as needed */
  flex-shrink: 0; /* Prevent adornments from shrinking */
}

.startAdornment {
  margin-right: 8px; /* Space between start adornment and input */
}

.endAdornment {
  margin-left: 8px; /* Space between input and end adornment */
}

/* Adjust input padding when adornments are present */
.inputWithStartAdornment {
  /* No specific padding needed if container handles it */
}

.inputWithEndAdornment {
  /* No specific padding needed if container handles it */
}

/* Label styles */
.label {
  position: absolute;
  left: 12px;
  /* Adjust initial position based on inputContainer padding */
  top: 28px; /* (16px container padding + 24px line height / 2) approx */
  transform: translateY(-50%);
  color: var(--text-field-label-color);
  pointer-events: none;
  transition: top 0.2s ease, transform 0.2s ease, font-size 0.2s ease, color
    0.2s ease;
  font-size: 1rem;
  z-index: 2;
  /* Adjust position based on start adornment */
  /* This might need JS or :has() selector if adornment width varies */
}

/* Adjust label position if start adornment exists */
.container:has(.startAdornment) .label {
  /* Estimate adornment width + margin */
  left: calc(12px + 24px + 8px); /* Adjust 24px based on typical icon size */
}

/* Floating label styles */
.container:focus-within .label,
.container:has(.inputContainer .input:not(:placeholder-shown):not([value=""]))
  .label,
.container:has(
    .inputContainer .textarea:not(:placeholder-shown):not([value=""])
  )
  .label {
  top: 8px; /* Float to the top padding area */
  transform: translateY(0) scale(0.75);
  transform-origin: top left;
  font-size: 0.75rem;
}

/* Adjust padding on input/textarea when label is floated */
/* This is now handled by the inputContainer padding */
/*
.container:focus-within .input,
.container:has(> .input:not(:placeholder-shown):not([value=""])) .input,
.container:focus-within .textarea,
.container:has(> .textarea:not(:placeholder-shown):not([value=""])) .textarea {
   padding-top: 28px;
   padding-bottom: 4px;
}
*/

.container:focus-within .label {
  color: var(--text-field-label-color-focus);
}

/* Container for supporting text, absolutely positioned below the wrapper */
.supportingTextContainer {
  /* Keep position absolute, but adjust top */
  position: relative; /* Change to relative to flow naturally */
  /* top: 100%; <- Remove */
  padding: 4px 12px 0; /* Add padding top, align horizontal with input */
  box-sizing: border-box;
  min-height: 1.25rem; /* Reserve space for one line of text */
  /* max-width: calc(100% - 24px); <- Remove, let it take full width */
}

/* Supporting text (description/error) styles */
.description,
.error {
  font-size: 0.75rem;
  line-height: 1.33;
}

.description {
  color: var(--text-field-supporting-text-color);
}

.error {
  color: var(--text-field-error-text-color);
}

/* --- Filled Variant Specific Styles --- */
.filled {
  /* Marker class, styles are on .container */
}

/* Apply hover/focus directly to .container */
.container:hover {
  background-color: color-mix(
    in srgb,
    var(--text-field-background) 96%,
    var(--md-sys-color-on-surface) 4%
  );
}

.container:focus-within {
  border-bottom-width: var(--text-field-border-width-focus);
  border-bottom-color: var(--text-field-border-color-focus);
}

/* --- Invalid State --- */
.container.invalid {
  --text-field-border-color: var(--text-field-border-color-error);
  --text-field-label-color: var(--text-field-label-color-error);
  border-bottom-color: var(--text-field-border-color-error);
}

.container.invalid:focus-within {
  --text-field-border-color-focus: var(--text-field-border-color-error);
  --text-field-label-color-focus: var(--text-field-label-color-error);
  border-bottom-color: var(--text-field-border-color-error);
}

/* --- Disabled State --- */
.container.disabled {
  opacity: var(--text-field-disabled-opacity);
  pointer-events: none;
  background-color: color-mix(
    in srgb,
    var(--text-field-background) 100%,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
  border-bottom-color: color-mix(
    in srgb,
    var(--text-field-border-color) 100%,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
}

.container.disabled .label,
.container.disabled .startAdornment /* Disable adornment color */,
.container.disabled .endAdornment {
  /* Disable adornment color */
  color: color-mix(
    in srgb,
    var(--text-field-label-color) 100% /* Use label color as base for adornments too */,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
}

.container.disabled .input,
.container.disabled .textarea {
  /* Disable textarea color too */
  color: color-mix(
    in srgb,
    var(--text-field-input-color) 100%,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
}
