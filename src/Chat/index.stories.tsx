import type { Meta, StoryObj } from "@storybook/react";
import { expect } from "@storybook/test";
import { type MouseEvent, useRef, useState } from "react"; // useRefをインポート
import {
  Popover,
  Menu as RACMenu,
  MenuItem as RACMenuItem,
} from "react-aria-components"; // PopoverとRACMenu, RACMenuItemをインポート
import { Chat } from "."; // Chatオブジェクト全体をインポート
// import { Menu } from "../Menu"; // 未使用なので削除
import { getCanvas } from "../libs/storybook";

const meta: Meta<typeof Chat.Root> = {
  // Chat.Rootを基準にするか、Chat全体か
  component: Chat.Root, // メインコンポーネントはChat.Rootにする
  parameters: {
    layout: "fullscreen", // チャットUIは全画面表示がいいかも
  },
  tags: ["autodocs"], // autogenerated docs
};

export default meta;

type Story = StoryObj<typeof meta>;

// --- Default Story ---
const DefaultChatStory = (args: Story["args"]) => {
  const [messages, setMessages] = useState<
    Array<{
      id: string;
      type: "message" | "typing";
      content?: string;
      isSender?: boolean;
      timestamp?: string;
      description?: string;
    }>
  >([
    {
      id: "1",
      type: "message",
      content: "ねえ、今日のランチどうする？",
      isSender: false,
      timestamp: "10:00 AM",
    },
    {
      id: "typing-receiver", // 受信者のタイピングインジケーター
      type: "typing",
      isSender: false,
    },
    {
      id: "2",
      type: "message",
      content: "ラーメン食べたい気分！🍜",
      isSender: true,
      timestamp: "10:01 AM",
    },
    {
      id: "3",
      type: "message",
      content: "いいね！どこのラーメン屋行く？",
      isSender: false,
      timestamp: "10:01 AM",
    },
    {
      id: "typing-sender", // 送信者のタイピングインジケーター (デモ用)
      type: "typing",
      isSender: true,
    },
    {
      id: "4",
      type: "message",
      content: "駅前の新しいとこ気になるんだよね～！",
      isSender: true,
      timestamp: "10:02 AM",
      description: "（未読）",
    },
  ]);

  const [menuState, setMenuState] = useState<{
    open: boolean;
    anchorPosition: { top: number; left: number } | null;
    messageId: string | null;
  }>({
    open: false,
    anchorPosition: null,
    messageId: null,
  });

  const triggerRef = useRef<HTMLDivElement>(null); // ダミーのトリガー要素のref

  const handleSend = (newMessageText: string) => {
    const newMessage = {
      id: String(messages.length + 1),
      type: "message" as const,
      content: newMessageText,
      isSender: true,
      timestamp: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
    };
    setMessages((prevMessages) => [...prevMessages, newMessage]);
  };

  const handleMessageContextMenu = (
    event: MouseEvent<HTMLDivElement>, // 型を明示
    messageId: string,
  ) => {
    event.preventDefault();
    // console.log("Message context menu triggered:", messageId, event);
    setMenuState({
      open: true,
      anchorPosition: { top: event.clientY, left: event.clientX },
      messageId,
    });
  };

  const handleMessageLongPress = (messageId: string) => {
    // console.log("Message long press triggered:", messageId);
    // 長押し時のMenu表示位置。ContextMenuと同じ位置にする。
    setMenuState((prevState) => ({
      open: true,
      anchorPosition: prevState.anchorPosition, // ContextMenuの位置を再利用
      messageId,
    }));
  };

  const handleCloseMenu = () => {
    setMenuState({ open: false, anchorPosition: null, messageId: null });
  };

  const handleEditMessage = (messageId: string | null) => {
    if (messageId) {
      alert(`Edit message: ${messageId}`);
      handleCloseMenu();
    }
  };

  const handleDeleteMessage = (messageId: string | null) => {
    if (messageId) {
      setMessages((prevMessages) =>
        prevMessages.filter((msg) => msg.id !== messageId),
      );
      handleCloseMenu();
    }
  };

  return (
    <>
      <Chat.Root
        {...args}
        style={{
          height: "600px",
          maxWidth: "400px",
          margin: "auto",
          border: "1px solid #ccc",
        }}
      >
        <div
          style={{
            flexGrow: 1,
            overflowY: "auto",
            padding: "16px",
            display: "flex",
            flexDirection: "column",
            gap: "8px",
          }}
        >
          {messages.map((msg) => {
            if (msg.type === "typing") {
              return (
                <Chat.TypingIndicator key={msg.id} isSender={msg.isSender} />
              );
            }
            return (
              <Chat.Message
                key={msg.id}
                isSender={msg.isSender}
                timestamp={msg.timestamp}
                description={msg.description}
                onContextMenu={(event) =>
                  handleMessageContextMenu(event, msg.id)
                }
                onLongPress={() => handleMessageLongPress(msg.id)}
              >
                {msg.content}
              </Chat.Message>
            );
          })}
        </div>
        <Chat.InputArea onSend={handleSend} placeholder="メッセージを入力..." />
      </Chat.Root>
      {/* ダミーのトリガー要素 (画面外に配置) */}
      <div
        ref={triggerRef}
        style={{ position: "fixed", top: "-9999px", left: "-9999px" }}
      />
      {menuState.open && menuState.anchorPosition && (
        <Popover
          triggerRef={triggerRef} // ダミーのトリガーrefを渡す
          isOpen={menuState.open}
          onOpenChange={(isOpen) => {
            if (!isOpen) handleCloseMenu();
          }}
          // placement="bottom start" // コメントアウトしたまま
          offset={5}
          style={{
            // Popoverの位置は引き続きstyleで制御
            position: "fixed",
            top: menuState.anchorPosition.top,
            left: menuState.anchorPosition.left,
          }}
        >
          <RACMenu
            onAction={(key) => {
              if (key === "edit") {
                handleEditMessage(menuState.messageId);
              } else if (key === "delete") {
                handleDeleteMessage(menuState.messageId);
              }
              handleCloseMenu(); // アクション後もメニューを閉じる
            }}
            aria-label="Message Actions"
            style={{
              background: "var(--md-sys-color-surface-container-high, #FFFFFF)", // テーマカラーを使うとよりGood
              border: "1px solid var(--md-sys-color-outline-variant, #CAC4D0)",
              borderRadius: "var(--md-sys-shape-corner-extra-small, 4px)",
              padding: "8px 0", // M3 Menu padding
              minWidth: "112px", // M3 Menu min width
              listStyle: "none",
              boxShadow:
                "var(--md-sys-elevation-level2, 0px 3px 8px rgba(0,0,0,0.24))", // M3 Elevation
            }}
          >
            <RACMenuItem
              id="edit"
              style={{
                padding: "0 12px", // M3 MenuItem padding
                height: "48px", // M3 MenuItem height
                display: "flex",
                alignItems: "center",
                cursor: "pointer",
                color: "var(--md-sys-color-on-surface, #1C1B1F)",
              }}
              className="hover:bg-[var(--md-sys-color-surface-container-highest-hover,rgba(0,0,0,0.08))]" // ホバーエフェクトの例 (テーマ対応)
            >
              編集
            </RACMenuItem>
            <RACMenuItem
              id="delete"
              style={{
                padding: "0 12px",
                height: "48px",
                display: "flex",
                alignItems: "center",
                cursor: "pointer",
                color: "var(--md-sys-color-on-surface, #1C1B1F)",
              }}
              className="hover:bg-[var(--md-sys-color-surface-container-highest-hover,rgba(0,0,0,0.08))]"
            >
              削除
            </RACMenuItem>
          </RACMenu>
        </Popover>
      )}
    </>
  );
};

export const Default: Story = {
  render: DefaultChatStory,
  args: {},
};

// --- Empty State Story ---
export const Empty: Story = {
  render: (args) => {
    const handleSend = (messageText: string) => {
      alert(`Message sent: ${messageText}`);
    };
    return (
      <Chat.Root
        {...args}
        style={{
          height: "300px",
          maxWidth: "400px",
          margin: "auto",
          border: "1px solid #ccc",
        }}
      >
        <div
          style={{
            flexGrow: 1,
            overflowY: "auto",
            padding: "16px",
            display: "flex",
            flexDirection: "column",
            gap: "8px",
          }}
        >
          {/* No messages */}
        </div>
        <Chat.InputArea
          onSend={handleSend}
          placeholder="最初のメッセージを送ろう！"
        />
      </Chat.Root>
    );
  },
  args: {},
};

// --- With Accessories Story ---
const WithAccessoriesChatStory = (args: Story["args"]) => {
  const [messages, setMessages] = useState<
    Array<{ id: string; content: string; isSender?: boolean }>
  >([
    { id: "1", content: "ファイル送れる？", isSender: false },
    { id: "2", content: "試してみるね！", isSender: true },
  ]);

  const handleSend = (newMessageText: string) => {
    setMessages((prevMessages) => [
      ...prevMessages,
      {
        id: String(messages.length + 1),
        content: newMessageText,
        isSender: true,
      },
    ]);
  };

  return (
    <Chat.Root
      {...args}
      style={{
        height: "500px",
        maxWidth: "400px",
        margin: "auto",
        border: "1px solid #ccc",
      }}
    >
      <div
        style={{
          flexGrow: 1,
          overflowY: "auto",
          padding: "16px",
          display: "flex",
          flexDirection: "column",
          gap: "8px",
        }}
      >
        {messages.map((msg) => (
          <Chat.Message key={msg.id} isSender={msg.isSender}>
            {msg.content}
          </Chat.Message>
        ))}
      </div>
      <Chat.InputArea
        onSend={handleSend}
        placeholder="メッセージを入力..."
        leadingAccessory={
          <button type="button" onClick={() => alert("Attach file clicked!")}>
            📎
          </button>
        }
        trailingAccessory={
          <button type="button" onClick={() => alert("Emoji clicked!")}>
            😀
          </button>
        }
        sendButtonContent="🚀"
      />
    </Chat.Root>
  );
};
export const WithAccessories: Story = {
  render: WithAccessoriesChatStory,
  args: {},
};

// --- Behavior Test (Optional, if needed) ---
export const Behavior: Story = {
  render: DefaultChatStory, // Defaultのストーリーを再利用
  args: {},
  play: async ({ canvasElement }) => {
    const canvas = getCanvas(canvasElement);
    // Chat.InputAreaのinput要素を取得
    const inputElement = canvas.getByPlaceholderText("メッセージを入力...");
    expect(inputElement).toBeTruthy();

    // Chat.InputAreaのbutton要素を取得 (sendButtonContentが"Send"の場合)
    // もしsendButtonContentがアイコンなら、getByRoleなどで適切に取得する
    // const sendButton = canvas.getByRole('button', { name: /Send/i });
    // expect(sendButton).toBeTruthy();

    // TODO: より具体的なインタラクションテストを追加
    // 例: inputに入力して送信ボタンをクリックし、新しいメッセージが表示されることを確認
  },
};
