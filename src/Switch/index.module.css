.root {
  --switch-track-width: 52px;
  --switch-track-height: 32px;
  --switch-thumb-size-off: 16px;
  --switch-thumb-size-on: 24px;
  --switch-icon-size: 16px;
  --switch-track-padding: 4px;
  /* --switch-thumb-offset-x will be calculated dynamically in transform */

  display: inline-flex;
  align-items: center;
  gap: 8px; /* Gap between switch and label if any */
  cursor: pointer;
  position: relative; /* For absolute positioning of thumb and icons */
  user-select: none;
  -webkit-tap-highlight-color: transparent; /* Remove tap highlight on mobile */
  vertical-align: middle; /* Align with text if used inline */
}

.track {
  position: relative;
  width: var(--switch-track-width);
  height: var(--switch-track-height);
  border-radius: 16px; /* Fully rounded */
  background-color: var(--md-sys-color-surface-container-highest); /* Unselected track color */
  border: 2px solid var(--md-sys-color-outline); /* Unselected border */
  transition: background-color 150ms ease-in-out, border-color 150ms ease-in-out;
  box-sizing: border-box; /* Include border in size */
}

.thumb {
  position: absolute;
  top: 50%;
  /* Adjust left position for off state to center the smaller thumb */
  left: calc(
    var(--switch-track-padding) +
    (var(--switch-thumb-size-on) - var(--switch-thumb-size-off)) /
    2
  );
  width: var(--switch-thumb-size-off);
  height: var(--switch-thumb-size-off);
  border-radius: 50%; /* Circular thumb */
  background-color: var(--md-sys-color-outline); /* Unselected thumb color */
  box-shadow: var(--md-sys-elevation-1);
  transition:
    transform 150ms ease-in-out, background-color 150ms ease-in-out,
    width 150ms ease-in-out, height 150ms ease-in-out, top 150ms ease-in-out, left 150ms ease-in-out;
  display: flex; /* Icon centering */
  align-items: center; /* Icon centering */
  justify-content: center; /* Icon centering */
  box-sizing: border-box;
  transform: translateY(-50%);
}

/* Styles for when an icon is present (either custom or default checkmark) */
.withIcon.thumb {
  /* Adjust padding or size if needed when an icon is present */
  /* For now, assume the icon fits within the standard thumb size */
}

.icon {
  width: var(--switch-icon-size);
  height: var(--switch-icon-size);
  /* Visibility / Opacity is handled by opacity property */
  opacity: 0; /* Hidden by default (off state) */
  transition: opacity 150ms ease-in-out, color 150ms ease-in-out; /* Transition opacity and color */
  /* Default icon color will be handled by specific state selectors below */
  /* Ensure icon is centered if thumb is flex container */
  position: absolute; /* Position icon within thumb */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* Selected state */
.root[data-selected] .track {
  background-color: var(--md-sys-color-primary);
  border-color: var(--md-sys-color-primary);
}

.root[data-selected] .thumb {
  width: var(--switch-thumb-size-on);
  height: var(--switch-thumb-size-on);
  left: var(--switch-track-padding); /* Reset left for on state */
  transform: translateX(
      calc(
        var(--switch-track-width) -
        var(--switch-thumb-size-on) -
        2 *
        var(--switch-track-padding)
      )
    )
    translateY(-50%);
  /* background-color set based on icon presence below */
}

/* Hover state */
.root:not([data-disabled]):hover .thumb::before {
  content: "";
  position: absolute;
  width: 40px; /* M3 hover state indicator size */
  height: 40px;
  border-radius: 50%;
  background-color: var(--md-sys-color-outline);
  opacity: var(--md-sys-state-hover-state-layer-opacity);
  transform: translate(-50%, -50%) scale(1);
  top: 50%;
  left: 50%;
  z-index: -1; /* Behind the thumb */
}

.root[data-selected]:not([data-disabled]):hover .thumb::before {
  background-color: var(--md-sys-color-primary);
}

/* Focus state */
.root[data-focus-visible] .thumb::after {
  content: "";
  position: absolute;
  width: 40px; /* M3 focus state indicator size */
  height: 40px;
  border-radius: 50%;
  background-color: var(--md-sys-color-outline);
  opacity: var(--md-sys-state-focus-state-layer-opacity);
  transform: translate(-50%, -50%) scale(1);
  top: 50%;
  left: 50%;
  z-index: -1; /* Behind the thumb */
}

.root[data-selected][data-focus-visible] .thumb::after {
  background-color: var(--md-sys-color-primary);
}

/* Pressed state */
.root:not([data-disabled]):active .thumb {
  /* M3 uses a larger thumb on press - 28px */
  /* For off state, when active, it should grow from 16px to 28px */
  /* For on state, when active, it should grow from 24px to 28px */
  width: 28px;
  height: 28px;
  /* Adjust left for off state when pressed */
  left: calc(
    var(--switch-track-padding) +
    (var(--switch-thumb-size-on) - 28px) /
    2
  );
}

.root[data-selected]:not([data-disabled]):active .thumb {
  width: 28px;
  height: 28px;
  /* transform will use the new 28px size for calculation if we redefine offset, or adjust manually */
  /* Keep left as per selected state, translateX will handle the rest */
  left: var(--switch-track-padding);
  transform: translateX(
      calc(var(--switch-track-width) - 28px - 2 * var(--switch-track-padding))
    )
    translateY(-50%);
}

/* Disabled state */
.root[data-disabled] {
  cursor: not-allowed;
  opacity: var(--md-sys-state-disabled-state-layer-opacity); /* Apply opacity to the whole component */
}

.root[data-disabled] .track {
  background-color: var(--md-sys-color-surface-container-highest);
  border-color: var(--md-sys-color-on-surface); /* Disabled border color */
}

.root[data-disabled] .thumb {
  background-color: var(--md-sys-color-on-surface);
}

.root[data-selected][data-disabled] .track {
  background-color: var(--md-sys-color-on-surface);
  border-color: var(--md-sys-color-on-surface);
}

.root[data-selected][data-disabled] .thumb {
  background-color: var(--md-sys-color-surface);
}

.root[data-selected][data-disabled] .icon {
  color: var(--md-sys-color-on-surface); /* Disabled selected icon color */
}

/* --- Icon Color Styles (Applied when icon is present, regardless of data-icon attribute) --- */

/* Unselected Icon Color */
.root:not([data-selected]):not([data-disabled]) .icon {
  color: var(--md-sys-color-surface-container-highest);
}
/* Selected Icon Color */
.root[data-selected]:not([data-disabled]) .icon {
  color: var(--md-sys-color-on-primary-container);
  opacity: 1; /* Show icon in selected state */
}

/* Disabled Unselected Icon Color */
.root[data-disabled]:not([data-selected]) .icon {
  color: var(--md-sys-color-on-surface);
}
/* Disabled Selected Icon Color - already handled by .root[data-selected][data-disabled] .icon */

/* --- Thumb background and border styles based on icon presence and state --- */

/* Unselected Icon State - Thumb Style */
.root.withIcon:not([data-selected]) .thumb {
  background-color: transparent;
  border: 2px solid var(--md-sys-color-outline);
  box-sizing: border-box;
}

/* Selected Icon State - Thumb Style */
.root.withIcon[data-selected] .thumb {
  background-color: var(--md-sys-color-primary-container); /* M3 uses primary container for selected icon thumb */
  border: none;
}
/* Ensure selected track color applies even with icon */
.root.withIcon[data-selected] .track {
  background-color: var(--md-sys-color-primary);
  border-color: var(--md-sys-color-primary);
}

/* Disabled Unselected Icon State - Thumb Style */
.root.withIcon[data-disabled]:not([data-selected]) .thumb {
  border-color: var(--md-sys-color-on-surface);
  background-color: transparent;
}

/* Disabled Selected Icon State - Thumb Style */
.root.withIcon[data-selected][data-disabled] .thumb {
  background-color: transparent; /* Disabled selected thumb is transparent */
  border-color: var(--md-sys-color-on-surface); /* Use disabled border color */
  border-width: 2px;
  border-style: solid;
  box-sizing: border-box;
}

/* --- Default Switch Specific Styles (No Icon) --- */
/* This means .root:not(.withIcon) */
.root:not(.withIcon)[data-selected] .thumb {
  /* transform is already handled by .root[data-selected] .thumb, which now includes translateY */
  background-color: var(--md-sys-color-on-primary);
}
/* Track color already handled by general .root[data-selected] .track */
