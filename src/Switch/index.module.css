.root {
  --switch-track-width: 52px;
  --switch-track-height: 32px;
  --switch-thumb-size: 24px;
  --switch-icon-size: 16px;
  --switch-track-padding: 4px; /* Reverting to original calculation (track_height - thumb_size) / 2 */
  --switch-thumb-offset-x: calc(
    var(--switch-track-width) /* 52px */ -
    var(--switch-thumb-size) /* 24px */ -
    2 *
    var(--switch-track-padding) /* 2 * 4px = 8px --> 52-24-8 = 20px */
  );

  display: inline-flex;
  align-items: center;
  gap: 8px; /* Gap between switch and label if any */
  cursor: pointer;
  position: relative; /* For absolute positioning of thumb and icons */
  user-select: none;
  -webkit-tap-highlight-color: transparent; /* Remove tap highlight on mobile */
  vertical-align: middle; /* Align with text if used inline */
}

.track {
  position: relative;
  width: var(--switch-track-width);
  height: var(--switch-track-height);
  border-radius: 16px; /* Fully rounded */
  background-color: var(--md-sys-color-surface-container-highest); /* Unselected track color */
  border: 2px solid var(--md-sys-color-outline); /* Unselected border */
  transition: background-color 150ms ease-in-out, border-color 150ms ease-in-out;
  box-sizing: border-box; /* Include border in size */
}

.thumb {
  position: absolute;
  top: var(--switch-track-padding);
  left: var(--switch-track-padding);
  width: var(--switch-thumb-size);
  height: var(--switch-thumb-size);
  border-radius: 50%; /* Circular thumb */
  background-color: var(--md-sys-color-outline); /* Unselected thumb color */
  box-shadow: var(--md-sys-elevation-1);
  transition: transform 150ms ease-in-out, background-color 150ms ease-in-out,
    width 150ms ease-in-out, height 150ms ease-in-out;
  /* display: flex; Remove flex properties, icon is absolutely positioned */
  /* align-items: center; */
  /* justify-content: center; */
  /* Default icon color set below based on selection */
}

.icon {
  width: var(--switch-icon-size);
  height: var(--switch-icon-size);
  /* Visibility / Opacity is handled implicitly by presence in DOM */
  transition: color 150ms ease-in-out; /* Transition color */
  color: var(--md-sys-color-surface-container-highest); /* Default unselected icon color */
  /* Ensure icon is centered if thumb is flex container */
  position: absolute; /* Position icon within thumb */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* Selected state */
.root[data-selected] .track {
  background-color: var(--md-sys-color-primary);
  border-color: var(--md-sys-color-primary);
}

.root[data-selected] .thumb {
  transform: translateX(var(--switch-thumb-offset-x));
  /* background-color set based on icon presence below */
}

/* Hover state */
.root:not([data-disabled]):hover .thumb::before {
  content: "";
  position: absolute;
  width: 40px; /* M3 hover state indicator size */
  height: 40px;
  border-radius: 50%;
  background-color: var(--md-sys-color-outline);
  opacity: var(--md-sys-state-hover-state-layer-opacity);
  transform: translate(-50%, -50%) scale(1);
  top: 50%;
  left: 50%;
  z-index: -1; /* Behind the thumb */
}

.root[data-selected]:not([data-disabled]):hover .thumb::before {
  background-color: var(--md-sys-color-primary);
}

/* Focus state */
.root[data-focus-visible] .thumb::after {
  content: "";
  position: absolute;
  width: 40px; /* M3 focus state indicator size */
  height: 40px;
  border-radius: 50%;
  background-color: var(--md-sys-color-outline);
  opacity: var(--md-sys-state-focus-state-layer-opacity);
  transform: translate(-50%, -50%) scale(1);
  top: 50%;
  left: 50%;
  z-index: -1; /* Behind the thumb */
}

.root[data-selected][data-focus-visible] .thumb::after {
  background-color: var(--md-sys-color-primary);
}

/* Pressed state */
.root:not([data-disabled]):active .thumb {
  /* M3 uses a larger thumb on press */
  width: 28px;
  height: 28px;
  /* Adjust position slightly to keep centered feel */
  /* With padding 4px, this becomes 4px - 0px = 4px? No, should center 28px in 32px box -> top 2px */
  /* Let's recalculate based on 28px thumb in 32px track height */
  /* Padding needed = (32 - 28) / 2 = 2px */
  top: 2px;
  left: 2px; /* Keep horizontal adjustment simple */
}
.root[data-selected]:not([data-disabled]):active .thumb {
  transform: translateX(var(--switch-thumb-offset-x));
  /* top: 2px; Should inherit from above */
  left: 2px; /* Keep left adjustment */
}

/* Disabled state */
.root[data-disabled] {
  cursor: not-allowed;
  opacity: var(--md-sys-state-disabled-state-layer-opacity); /* Apply opacity to the whole component */
}

.root[data-disabled] .track {
  background-color: var(--md-sys-color-surface-container-highest);
  border-color: var(--md-sys-color-on-surface); /* Disabled border color */
}

.root[data-disabled] .thumb {
  background-color: var(--md-sys-color-on-surface);
}

.root[data-selected][data-disabled] .track {
  background-color: var(--md-sys-color-on-surface);
  border-color: var(--md-sys-color-on-surface);
}

.root[data-selected][data-disabled] .thumb {
  background-color: var(--md-sys-color-surface);
}

.root[data-selected][data-disabled] .icon {
  color: var(--md-sys-color-on-surface); /* Disabled selected icon color */
}

/* --- Icon Specific Styles --- */

/* Unselected Icon State */
.root[data-icon]:not([data-selected]) .thumb {
  background-color: transparent;
  border: 2px solid var(--md-sys-color-outline);
  box-sizing: border-box;
}
.root[data-icon]:not([data-selected]) .icon {
  color: var(--md-sys-color-surface-container-highest); /* Explicitly set unselected icon color */
}

/* Selected Icon State */
.root[data-icon][data-selected] .thumb {
  transform: translateX(var(--switch-thumb-offset-x)); /* Ensure transform is applied */
  background-color: var(--md-sys-color-primary-container); /* M3 uses primary container for selected icon thumb */
  border: none;
}
.root[data-icon][data-selected] .icon {
  color: var(--md-sys-color-on-primary-container); /* M3 uses on-primary-container for selected icon */
}
/* Ensure selected track color applies even with icon */
.root[data-icon][data-selected] .track {
  background-color: var(--md-sys-color-primary);
  border-color: var(--md-sys-color-primary);
}

/* Disabled Unselected Icon State */
.root[data-icon][data-disabled]:not([data-selected]) .thumb {
  border-color: var(--md-sys-color-on-surface);
  background-color: transparent;
}
.root[data-icon][data-disabled]:not([data-selected]) .icon {
  color: var(--md-sys-color-on-surface); /* Disabled unselected icon color */
}

/* Disabled Selected Icon State */
.root[data-icon][data-selected][data-disabled] .thumb {
  transform: translateX(var(--switch-thumb-offset-x)); /* Ensure transform is applied */
  background-color: transparent; /* Disabled selected thumb is transparent */
  border-color: var(--md-sys-color-on-surface); /* Use disabled border color */
  /* Ensure border is applied */
  border-width: 2px;
  border-style: solid;
  box-sizing: border-box;
}
.root[data-icon][data-selected][data-disabled] .icon {
  color: var(--md-sys-color-on-surface); /* Disabled selected icon color */
}

/* --- Default Switch Specific Styles (No Icon) --- */
.root:not([data-icon])[data-selected] .thumb {
  transform: translateX(var(--switch-thumb-offset-x)); /* Ensure transform is applied */
  background-color: var(--md-sys-color-on-primary);
}
/* Track color already handled by general .root[data-selected] .track */
